using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using Lean.Gui;
using Core;
using Cysharp.Threading.Tasks;
using TMPro;
using KitaujiGameDesignClub.GameFramework.UI;
using UnityEngine.Events;
using System.IO;

public class TestMode : MonoBehaviour
{
    //备注：进入测试模式之前，应当修改内存中的设置，使测试模式永远开启控制台和帧率显示

    [Header("通用")]
    public TMP_Text title;
    /// <summary>
    /// 切换到游戏场景之前，需要执行的事件
    /// </summary>
    private List<UnityAction> eventBeforeSwitchToGame = new();
    public CanvasGroup panel;
    public TMP_Text loadState;
    public LeanButton panelCloseButton;
    public LeanButton CardSelectorOpenByFileExplorerButton;
    [Header("卡牌选择器")]
    public Toggle CardSelectorToggle;
    public GameObject cardSelector;
    public LeanButton CardSelectorConfirmButton;   
    /// <summary>
    /// “卡牌选择器"的卡组列表
    /// </summary>
    public InputFieldWithDropdown BundleList;
    /// <summary>
    /// 卡牌选择器左侧的卡组信息展示
    /// </summary>
    public GameObject BundleInformationDisplay;
    public TMP_Text manifestFriendlyName;
    public TMP_Text manifestName;
    public TMP_Text manifestAnime;
    public TMP_Text manifestAuthorName;
    public TMP_Text manifestDescription;
    /// <summary>
    /// “卡牌选择器"的卡牌列表
    /// </summary>
    public InputFieldWithDropdown CardList;
    /// <summary>
    /// 卡牌选择器右侧的卡牌信息展示
    /// </summary>
    public GameObject CardInformationDisplay;
    public TMP_Text cardFriendlyName;
    public TMP_Text cardCharacterName;
    public TMP_Text cardCharacterVoiceName;
    public TMP_Text cardAnime;
    public TMP_Text cardBasicInf;//攻击力和生命值
    public TMP_Text cardTag;
    public TMP_Text cardDescription;
    /// <summary>
    /// 缓存的所有卡组
    /// </summary>
    private Bundle[] allBundles;
    /// <summary>
    /// 选择的卡组的id
    /// </summary>
    int selectedBundleId = -1;
    /// <summary>
    /// 选择的卡牌的id（选定卡组内的）
    /// </summary>
    int selectedCardId = -1;

    [Header("语音测试器")]
    public GameObject voiceTestor;
    public Toggle voiceTestorToggle;
    public AudioSource voiceTestPlayer;
    public Slider voiceTestVolume;
    /// <summary>
    /// 6个音频测试器
    /// </summary>
    public TMAudioTestor[] tMAudioTestors = new TMAudioTestor[6];

    private Animator animator;

    private void Awake()
    {
        //如果没有开启测试模式，就销毁这个物体


    }

    /// <summary>
    /// 加载测试模式
    /// </summary>
    async void Start()
    {        
        //面板初始化
        title.text = $"目前处于测试模式\nDevice:{SystemInfo.deviceType}  CPU:{SystemInfo.processorType}  OS:{SystemInfo.operatingSystem}  RAM:{SystemInfo.systemMemorySize}MiB  Screen:{Screen.currentResolution}";


        #region 调整卡牌选择器板块的激活状态
        BundleList.gameObject.SetActive(true);
        BundleInformationDisplay.SetActive(false);
        CardList.gameObject.SetActive(false);
        CardInformationDisplay.SetActive(false);
        #endregion

        #region 调整音频测试器板块的激活状态
        foreach (var item in tMAudioTestors)
        {
            item.gameObject.SetActive(false);
        }
        #endregion


        //加载测试模式
        await LoadTestMode();

    }

    /// <summary>
    /// 加载 初始化测试模式
    /// </summary>
    /// <returns></returns>
    private async UniTask LoadTestMode()
    {
        animator = GetComponent<Animator>();
        //初始化额外加载状态
        loadState.text = string.Empty;
        GameUI.gameUI.SetBanInputLayer(true, "测试模式载入中...");
        backgroundActivity();


        #region 卡牌选择器
        //卡牌选择器 展开和关闭
        Toggle(CardSelectorToggle,cardSelector);

        //读取所有的卡组
        GameUI.gameUI.SetBanInputLayer(true, "卡组读取中...");
        allBundles = await CardReadWrite.GetAllBundles();

#if UNITY_EDITOR || UNITY_STANDALONE
        //用资源管理器打开规定的目录
        CardSelectorOpenByFileExplorerButton.OnClick.AddListener(delegate
        {
            Application.OpenURL($"file://{Information.bundlesPath}");
        });

#else
  Destroy(CardSelectorOpenByFileExplorerButton.gameObject);
#endif

        //把卡组清单的内容映射到“卡组列表”中（卡牌选择器左侧的东西）
        List<string> bundlesName = new();
        // bundlesName.Add("<align=\"center\"><alpha=#CC>以下为可用卡组");
        for (int i = 0; i < allBundles.Length; i++)
        {
            Bundle bundle = allBundles[i];
            if (string.IsNullOrEmpty(bundle.manifest.Anime)) bundlesName.Add($"{bundle.manifest.FriendlyBundleName}<alpha=#00>{i}");
            else bundlesName.Add($"【{bundle.manifest.Anime}】{bundle.manifest.FriendlyBundleName}<alpha=#00>{i}");
            //透明度为0的隐藏字符：<alpha=#00>{i}，用来记录这些卡组的序号，便于搜索后选择
        }
        BundleList.ChangeOptionDatas(bundlesName);
        bundlesName = null;
        //  BundleList.ban.Add("<align=\"center\"><alpha=#CC>以下为可用卡组");

        //选定的卡组信息同步
        BundleList.onDropdownValueChangedWithoutInt.AddListener(delegate
        {
            //allBundles[selectedBundleId]：所选卡组

            //获取所选bundle的序号
            Debug.Log(BundleList.text.Split("<alpha=#00>")[1]);
            selectedBundleId = BundleList.text.Contains("<alpha=#00>") ? int.Parse(BundleList.text.Split("<alpha=#00>")[1]) : -1;

            //卡组有选择，信息同步与卡牌列表激活
            if (BundleList.DropdownValue != 0)
            {
                UpdateSelectorBundleInformation(allBundles[selectedBundleId].manifest);
                //显示此卡组信息，并允许选择卡牌
                BundleInformationDisplay.SetActive(true);
                CardList.gameObject.SetActive(true);
                //可用卡组也放到列表中
                List<string> cardsName = new();
                for (int i = 0; i < allBundles[selectedBundleId].cards.Length; i++)
                {
                    CharacterCard card = allBundles[selectedBundleId].cards[i];
                    if (string.IsNullOrEmpty(card.CharacterName)) cardsName.Add($"{card.FriendlyCardName}<alpha=#00>{i}");
                    else cardsName.Add($"【{card.CharacterName}】{card.FriendlyCardName}<alpha=#00>{i}");
                    //透明度为0的隐藏字符：<alpha=#00>{i}，用来记录这些卡组的序号，便于搜索后选择
                }
                CardList.ChangeOptionDatas(cardsName);
            }
            //value = 0，没有选择卡组，将不必要的板块禁用
            else
            {
                BundleInformationDisplay.SetActive(false);
                CardList.gameObject.SetActive(false);
                CardInformationDisplay.SetActive(false);
                CardList.text = string.Empty;
                CardList.ClearOptions();
            }

        });
        //选定的卡牌信息同步
        CardList.onDropdownValueChangedWithoutInt.AddListener(delegate 
        {
            //获取所选card的序号
            Debug.Log(CardList.text.Split("<alpha=#00>")[1]);
            selectedCardId = CardList.text.Contains("<alpha=#00>") ? int.Parse(CardList.text.Split("<alpha=#00>")[1]) : -1;

            UpdateSelectorCardInformation(allBundles[selectedBundleId].cards[selectedCardId]);
            CardInformationDisplay.SetActive(true);
        });

        //确认此卡牌上场，并添加加载资源的事件
        CardSelectorConfirmButton.OnClick.AddListener(delegate
        {
            //allBundles[selectedBundleId]：所选卡组

            //不选择卡牌，不允许执行确认操作
            if (CardList.DropdownValue > 0)
            {
                //添加加载资源的事件
                eventBeforeSwitchToGame.Add(UniTask.UnityAction(async () =>
                {
                    //所选卡牌
                    var card = allBundles[selectedBundleId].cards[selectedCardId];
                    loadState.text = $"正在加载“{card.FriendlyCardName}”，请等待...";
                    //所选卡牌的文件夹路径
                    var cardDiectoryPath = $"{Path.GetDirectoryName(allBundles[selectedBundleId].manifestFullPath)}/cards/{card.CardName}";

                    //图片加载              
                    var image = await LoadCoverImage($"{cardDiectoryPath}/{card.ImageName}");
                    //音频加载
                    var audios = await LoadAllAudioOfOneCard(card, cardDiectoryPath);
                    GameStageCtrl.stageCtrl.AddCardAndDisplayInStage(card, 0, image, audios[0], audios[1], audios[2], audios[3]);
                    loadState.text = string.Empty;
                    image = null;
                    audios = null;
                }));
            }
        });
        #endregion

        #region 语音测试器
        Toggle(voiceTestorToggle,voiceTestor);
        //打开音频测试器之后，读取场上存在的卡牌，用于测试音频
        voiceTestorToggle.onValueChanged.AddListener(delegate
        {
            //当然是得激活才读取
            if (voiceTestorToggle.isOn)
            {
                var allCardPanels = GameStageCtrl.stageCtrl.GetAllCardOnStage(0);
                //激活测试器，然后配置相应的资源
                for (int i = 0; i < allCardPanels.Length; i++)
                {
                    tMAudioTestors[i].EnableAudioTestor(allCardPanels[i]);
                }
               
            }
            //关闭测试器界面，就把所有的测试器禁用了
            else
            {
                foreach (var item in tMAudioTestors)
                {
                    item.gameObject.SetActive(false);
                }
            }
          
        });

        //音量调整
        voiceTestVolume.onValueChanged.AddListener(delegate (float arg0)
        {
            voiceTestPlayer.volume = arg0;
        });

        #endregion

        //关闭输入遮罩
        GameUI.gameUI.SetBanInputLayer(false, "测试模式载入中...");
    }


    private async UniTask backgroundActivity()
    {
        while (true)
        {
            await UniTask.Yield(PlayerLoopTiming.Update);

            if(eventBeforeSwitchToGame.Count > 0)
            {
              eventBeforeSwitchToGame[0].Invoke();
                //即使被remove掉，这个事件仍会继续运行
              eventBeforeSwitchToGame.RemoveAt(0);
            }
        }
    }

    #region 通用
    void Toggle(Toggle toggle,GameObject panelObject)
    {
        //上方的切换器
        toggle.onValueChanged.AddListener(delegate
        {
            //全都加载完了，才能切换开关
            if (string.IsNullOrEmpty(loadState.text))
            {
                //切换开关状态                
                animator.SetBool("Expanded", toggle.isOn);
                panelObject.SetActive(toggle.isOn);
            }

        });

        //每个panel内部的关闭按钮
        panelCloseButton.OnClick.AddListener(delegate
        {
            //保存关闭状态
            toggle.isOn = false;

        });

        //关闭这个工具的界面
        panelObject.SetActive(false);
    }
    #endregion


    #region 卡牌选择器配套方法

    /// <summary>
    /// 在卡牌选择器中同步卡组清单信息
    /// </summary>
    /// <param name="manifestContent"></param>
    void UpdateSelectorBundleInformation(CardBundlesManifest manifestContent)
    {
        manifestFriendlyName.text = $"<b>友好名称：</b>\n<margin-left=1em><size=80%>{manifestContent.FriendlyBundleName}";
        manifestName.text =  $"<b>识别名称：</b>\n<margin-left=1em><size=80%>{manifestContent.BundleName}";
        manifestAnime.text = $"<b>所属动画：</b>\n<margin-left=1em><size=80%>{manifestContent.Anime}";
        manifestAuthorName.text = $"<b>作者名称：</b>\n<margin-left=1em><size=80%>{manifestContent.AuthorName}";
        manifestDescription.text = $"<b>卡组介绍：</b>\n<margin-left=1em><size=80%>{manifestContent.Description}";
    }

    /// <summary>
    /// 在卡牌选择器中同步卡牌信息
    /// </summary>
    /// <param name="manifestContent"></param>
    void UpdateSelectorCardInformation(CharacterCard cardContent)
    {
        cardFriendlyName.text = $"<b>友好名称：</b>\n<margin-left=1em><size=80%>{cardContent.FriendlyCardName}";
        cardCharacterName.text = $"<b>角色名称：</b>\n<margin-left=1em><size=80%>{cardContent.CharacterName}";
        cardCharacterVoiceName.text = $"<b>声优名称：</b>\n<margin-left=1em><size=80%>{cardContent.CV}";
        cardAnime.text = $"<b>所属动画：</b>\n<margin-left=1em><size=80%>{cardContent.Anime}";
        cardBasicInf.text = $"<b>执行力/体力值：</b>{cardContent.BasicPower}/{cardContent.BasicHealthPoint}";
        //标签展示
        cardTag.text = $"<b>标签：</b>";
        for (int i = 0; i < cardContent.tags.Count; i++)
        {
            string item = cardContent.tags[i];
            if (i == 0) cardTag.text = $"{cardTag.text}{item}";           
            cardTag.text = $"{cardTag.text}、{item}";
        }
        cardDescription.text = $"<b>能力介绍：</b>\n<margin-left=1em><size=80%>{cardContent.AbilityDescription}";
    }

    async UniTask<Sprite> LoadCoverImage(string inmageFullPath)
    {
        //加载图片，如果加载失败的话，就用预设自带的默认图片了
        var texture = await CardReadWrite.CoverImageLoader(inmageFullPath);
        if (texture != null)
        {
            return Sprite.Create(texture, new Rect(0f, 0f, texture.width, texture.height), Vector2.one / 2);
        }
        else return null;

    }

    /// <summary>
    /// 按照debut ability defeat exit的顺序读取某个卡牌所有的音频
    /// </summary>
    /// <param name="cardContent"></param>
    /// <param name="cardDirectoryPath"></param>
    /// <returns></returns>
    async UniTask<AudioClip[]> LoadAllAudioOfOneCard(CharacterCard cardContent,string cardDirectoryPath)
    {
        var (debut, ability, defeat, exit) = await UniTask.WhenAll(CardReadWrite.CardVoiceLoader($"{cardDirectoryPath}/{cardContent.voiceDebutFileName}"),
                                             CardReadWrite.CardVoiceLoader($"{cardDirectoryPath}/{cardContent.voiceAbilityFileName}"),
                                             CardReadWrite.CardVoiceLoader($"{cardDirectoryPath}/{cardContent.voiceDefeatFileName}"),
                                             CardReadWrite.CardVoiceLoader($"{cardDirectoryPath}/{cardContent.voiceExitFileName}"));

        AudioClip[] clips =  {debut,ability,defeat,exit};
        return clips;


    }
    #endregion

}


